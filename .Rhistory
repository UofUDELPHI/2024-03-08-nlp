.88*.99
.12*.99
.086 + .1386 + .872
.14*.01
.86 + .0014 + .1188 + .872
.086 + .0014 + .1188 + .872
.086 + .0014 + .1188 + .872.86*.01
.86*.01
.0086 + .0014 + .1188 + .872.86*.01
.0086 + 0.0014 + 0.1188 + 0.872
.91*.83/(.17*.09)
.83/.17
(.91*.83)/(.17*.09)
1 / choose(54, 6)
source("./propensity_scores.R")
options(scipen=999)
FILEPATH = "./NHEFS-1.xls"
# Turn categorical columns into factors
FACTOR_COLS = c(
"marital"
# ,"income"
,"education"
,"alcoholtype"
,"exercise"
,"active"
)
ANALYTIC_VARS = c(
"sex",
"age",
"race",
"income",
"marital",
"education", # Use this instead of school
"wt71",
"smokeintensity",
"asthma",
"bronch",
"tb",
"hf",
"hbp",
"pepticulcer",
"colitis",
"hepatitis",
"chroniccough",
"diabetes",
"polio",
"tumor",
"nervousbreak",
"alcoholpy",
"alcoholfreq",
"alcoholtype",
"alcoholhowmuch",
"pica",
"headache",
"otherpain",
"weakheart",
"nerves",
"lackpep",
"hbpmed",
"boweltrouble",
"infection",
"active",
"exercise",
"birthcontrol",
"pregnancies",
"cholesterol",
"wtloss"
)
df = read_data(FILEPATH, ANALYTIC_VARS, FACTOR_COLS)
str(df)
p_missing = df[c(ANALYTIC_VARS, "qsmk", "wtloss")] %>%
apply(2, function(x){mean(is.na(x))}) %>%
sort(decreasing=TRUE)
p_missing
df = df[which(apply(df[ANALYTIC_VARS], 1, function(x){max(is.na(x)) == FALSE})),]
m = glm(qsmk ~ ., data=df[c(ANALYTIC_VARS, "qsmk")], family=binomial())
summary(m)
df = add_propensity_scores(df, m)
str(df)
ggplot(df, aes(x=ps, fill=as.factor(qsmk))) +
geom_histogram() +
facet_wrap(~qsmk, scales="free_y", nrow=2)
ggplot(df, aes(x=w, fill=as.factor(qsmk))) +
geom_histogram() +
facet_wrap(~qsmk, scales="free_y", nrow=2)
tab1_unweighted = CreateTableOne(ANALYTIC_VARS, strata="qsmk", data=df)
tab1_unweighted
svy_weighted = svydesign(ids = ~ 1, data = df,  weights = ~w)
tab1_weighted = svyCreateTableOne(ANALYTIC_VARS, strata="qsmk", data=svy_weighted)
tab1_weighted
smds_uw = ExtractSmd(tab1_unweighted)
smds_w = ExtractSmd(tab1_weighted)
smds = tibble(
var = tab1_weighted$MetaData$vars,
unweighted = ExtractSmd(tab1_unweighted),
weighted =  ExtractSmd(tab1_weighted)
)
var_order =  smds %>%
arrange(unweighted) %>%
pull(var)
smds_uw = ExtractSmd(tab1_unweighted)
smds_w = ExtractSmd(tab1_weighted)
smds = tibble(
var = tab1_weighted$MetaData$vars,
unweighted = ExtractSmd(tab1_unweighted),
weighted =  ExtractSmd(tab1_weighted)
)
var_order =  smds %>%
arrange(unweighted) %>%
pull(var)
mutate(smds, var=factor(var, levels=var_order)) %>%
ggplot(aes(y=var, x=unweighted)) +
geom_point(color="red") +
geom_point(aes(x=weighted), color="blue") +
geom_vline(xintercept=0) +
geom_vline(xintercept=0.1)
model_unweighted = lm(wt82_71 ~ qsmk, data=df)
model_ipw = lm(wt82_71 ~ qsmk, data=df, weights = df$w)
summary(model_ipw)
means = calc_means(df, ANALYTIC_VARS)
sd_diffs = add_sd_diffs(means)
plot_standard_diffs = function(sd_diffs){
vars_ordered = sd_diffs %>%
filter(weight == "none") %>%
arrange((abs(sd_diff))) %>%
pull(var)
sd_diffs %>%
mutate(var=factor(var, levels=vars_ordered)) %>%
ungroup() %>%
ggplot(aes(y=var, x=abs(sd_diff), color=weight, shape=weight)) +
geom_point() +
geom_vline(xintercept=0) +
geom_vline(xintercept=0.1)
}
plot_standard_diffs(sd_diffs)
ggsave("./results/standardized_differences.png")
m.out1 <- matchit(qsmk ~ .,
data = dummy_cols(df[c("qsmk", ANALYTIC_VARS)], select_columns = FACTOR_COLS, remove_selected_columns = TRUE),
method = "nearest", distance = "glm")
library(MatchIt)
m.out1 <- matchit(qsmk ~ .,
data = dummy_cols(df[c("qsmk", ANALYTIC_VARS)], select_columns = FACTOR_COLS, remove_selected_columns = TRUE),
method = "nearest", distance = "glm")
m.out_summary = summary(m.out1, un=FALSE)
m.out_summary
install.packages("cobalt")
library(cobalt)
bal.tab(m.out_summary)
bal.tab(m.out_summary, un=TRUE)
help(bal.tab)
bal.tab(m.out_summary, un=TRUE,stats = c("m", "v", "ks"))
m.out1 <- matchit(qsmk ~ education,
data = dummy_cols(df[c("qsmk", ANALYTIC_VARS)], select_columns = FACTOR_COLS, remove_selected_columns = TRUE),
method = "nearest", distance = "glm")
m.out1 <- matchit(qsmk ~ education,
data = dummy_cols(df[c("qsmk", ANALYTIC_VARS)], select_columns = FACTOR_COLS, remove_selected_columns = TRUE),
method = "nearest", distance = "glm")
m.out1 <- matchit(qsmk ~ sex,
data = dummy_cols(df[c("qsmk", ANALYTIC_VARS)], select_columns = FACTOR_COLS, remove_selected_columns = TRUE),
method = "nearest", distance = "glm")
m.out1 <- matchit(qsmk ~ sex,
data = dummy_cols(df[c("qsmk", ANALYTIC_VARS)], select_columns = FACTOR_COLS, remove_selected_columns = TRUE),
method = "nearest", distance = "glm")
bal.tab(m.out_summary, un=TRUE,stats = c("m", "v", "ks"))
m.out_summary = summary(m.out1, un=FALSE)
m.out_summary
bal.tab(m.out_summary, un=TRUE,stats = c("m", "v", "ks"))
bal.tab(m.out_summary, un=TRUE,stats = c("m", "v", "ks"))
bal.tab(m.out, un=TRUE,stats = c("m", "v", "ks"))
bal.tab(m.out1, un=TRUE,stats = c("m", "v", "ks"))
m.out1 <- matchit(qsmk ~ .,
data = dummy_cols(df[c("qsmk", ANALYTIC_VARS)], select_columns = FACTOR_COLS, remove_selected_columns = TRUE),
method = "nearest", distance = "glm")
m.out_summary = summary(m.out1, un=FALSE)
m.out_summary
bal.tab(m.out, un=TRUE,stats = c("m", "v", "ks"))
bal.tab(m.out, un=TRUE,stats = c("m", "v", "ks"))
m.out <- matchit(qsmk ~ .,
data = dummy_cols(df[c("qsmk", ANALYTIC_VARS)], select_columns = FACTOR_COLS, remove_selected_columns = TRUE),
method = "nearest", distance = "glm")
m.out_summary = summary(m.out, un=FALSE)
m.out_summary
bal.tab(m.out, un=TRUE,stats = c("m", "v", "ks"))
love.plot(m.out, binary = "std")
m.out$model
bt = bal.tab(m.out, un=TRUE,stats = c("m", "v", "ks"))
bt
bt$Balance
bt = bal.tab(m.out, un=TRUE,stats = c("m", "v", "ks"))
bt$Balance %>%
mutate(unweighted = abs(Diff.Un), weighted=abs(Diff.Un)) %>%
#mutate(smds, var=factor(var, levels=var_order)) %>%
ggplot(aes(y=var, x=unweighted)) +
geom_point(color="red") +
geom_point(aes(x=weighted), color="blue") +
geom_vline(xintercept=0) +
geom_vline(xintercept=0.1)
bt
bt$Observations
bt$Balance %>%
mutate(unweighted = abs(Diff.Un), weighted=abs(Diff.Un))
bt$Balance %>%
mutate(unweighted = abs(Diff.Un), weighted=abs(Diff.Un)) %>%
#mutate(smds, var=factor(var, levels=var_order)) %>%
ggplot(aes(y=var, x=unweighted)) +
geom_point(color="red")
bt$Balance %>%
mutate(unweighted = abs(Diff.Un), weighted=abs(Diff.Un))
bt$Balance %>%
mutate(unweighted = abs(Diff.Un), weighted=abs(Diff.Un), var=rownames(bt)) %>%
#mutate(smds, var=factor(var, levels=var_order)) %>%
ggplot(aes(y=var, x=unweighted)) +
geom_point(color="red") +
geom_point(aes(x=weighted), color="blue") +
geom_vline(xintercept=0) +
geom_vline(xintercept=0.1)
t$Balance %>%
mutate(unweighted = abs(Diff.Un), weighted=abs(Diff.Un), var=rownames(bt))
rownames(bt)
names(bt)
bt %>%
mutate(unweighted = abs(Diff.Un), weighted=abs(Diff.Un), var=rownames(bt))
bt = bal.tab(m.out, un=TRUE,stats = c("m", "v", "ks"))
bt %>%
mutate(unweighted = abs(Diff.Un), weighted=abs(Diff.Un), var=rownames(bt))
bt$Balance %>%
mutate(unweighted = abs(Diff.Un), weighted=abs(Diff.Un), var=rownames(bt))
bt$Balance %>%
mutate(unweighted = abs(Diff.Un), weighted=abs(Diff.Un), var=rownames(bt)) %>%
#mutate(smds, var=factor(var, levels=var_order)) %>%
ggplot(aes(y=var, x=unweighted))
bt$Balance %>%
mutate(unweighted = abs(Diff.Un), weighted=abs(Diff.Un), var=rownames(bt))
bt = bal.tab(m.out, un=TRUE,stats = c("m", "v", "ks")) %>% mutate(unweighted = abs(Diff.Un), weighted=abs(Diff.Un))
bal.tab(m.out, un=TRUE,stats = c("m", "v", "ks")) %>% mutate(unweighted = abs(Diff.Un), weighted=abs(Diff.Un))
bt2 = bt$Balance %>%
mutate(unweighted = abs(Diff.Un), weighted=abs(Diff.Un), var=rownames(bt))
bt2
names(bt2)
rownames(bt2)
bt2$var = rownames(bt2)
bt2
bt2 %>%
#mutate(smds, var=factor(var, levels=var_order)) %>%
ggplot(aes(y=var, x=unweighted)) +
geom_point(color="red") +
geom_point(aes(x=weighted), color="blue") +
geom_vline(xintercept=0) +
geom_vline(xintercept=0.1)
bt2 %>%
#mutate(smds, var=factor(var, levels=var_order)) %>%
ggplot(aes(y=var, x=unweighted)) +
geom_point(color="red") +
geom_point(aes(x=weighted), color="blue") +
geom_vline(xintercept=0) +
geom_vline(xintercept=0.1)
bt2 %>%
#mutate(smds, var=factor(var, levels=var_order)) %>%
ggplot(aes(y=var, x=unweighted)) +
geom_point(color="red")
bt2 = bt$Balance %>%
mutate(unweighted = abs(Diff.Un), weighted=abs(Diff.Adj), var=rownames(bt))
bt2 %>%
#mutate(smds, var=factor(var, levels=var_order)) %>%
ggplot(aes(y=var, x=unweighted)) +
geom_point(color="red") +
geom_point(aes(x=weighted), color="blue") +
geom_vline(xintercept=0) +
geom_vline(xintercept=0.1)
bt2 = bt$Balance %>%
mutate(unweighted = abs(Diff.Un), weighted=abs(Diff.Adj), var=rownames(bt))
bt2$var = rownames(bt2)
bt2 %>%
#mutate(smds, var=factor(var, levels=var_order)) %>%
ggplot(aes(y=var, x=unweighted)) +
geom_point(color="red") +
geom_point(aes(x=weighted), color="blue") +
geom_vline(xintercept=0) +
geom_vline(xintercept=0.1)
ggsave("./results/matched_balance.png")
plot_standardized_mean_diffs = function(smds){
var_order =  smds %>%
arrange(unweighted) %>%
pull(var)
mutate(smds, var=factor(var, levels=var_order)) %>%
ggplot(aes(y=var, x=unweighted)) +
geom_point(color="red") +
geom_point(aes(x=weighted), color="blue") +
geom_vline(xintercept=0) +
geom_vline(xintercept=0.1)
}
plot_standardized_mean_diffs(smds)
plot_standardized_mean_diffs(bt2)
plot_standardized_mean_diffs(bt2[-1,])
bt2 %>%
#mutate(smds, var=factor(var, levels=var_order)) %>%
ggplot(aes(y=var, x=unweighted)) +
geom_point(color="red") +
geom_point(aes(x=weighted), color="blue") +
geom_vline(xintercept=0) +
geom_vline(xintercept=0.1)
plot_standardized_mean_diffs(bt2[-1,])
ggsave("./results/matched_balance.png")
plot_standardized_mean_diffs(smds)
ggsave("results/ipw_balance.png")
MatchIt::match.data(m.out)
dim(df[ANALYTIC_VARS])
sum(df[ANALYTIC_VARS, "qsmk"])
sum(df[ANALYTIC_VARS]$qsmk)
sum(df$qsmk)
matched_data_greedy = match.data(m.out)
OUTCOME
lm(wt82_71 ~ qsmk, data=matched_data_greedy)
matched_data_greedy
EXPOSURE
m.out <- matchit(qsmk ~ . - subjectid - wt82_71,
data = dummy_cols(df[c("qsmk", "subjectid", "wt82_71", ANALYTIC_VARS)], select_columns = FACTOR_COLS, remove_selected_columns = TRUE),
method = "nearest", distance = "glm")
df$seqn
read_data = function(fp, analytic_cols, factor_cols){
df = read_excel(fp)
df[factor_cols] = apply(df[factor_cols], 2, factor)
df = rename(df, studyid = seqn)
df = df[c(EXPOSURE, OUTCOME, analytic_cols)]
# Missing data
replace_na_0 = list("pregnancies"=0, "alcoholhowmuch"=0)
df[names(replace_na_0)] = replace_na(df[names(replace_na_0)], replace_na_0)
return(df)
}
read_data = function(fp, analytic_cols, factor_cols){
df = read_excel(fp)
df[factor_cols] = apply(df[factor_cols], 2, factor)
df = rename(df, studyid = seqn)
df = df[c(studyid, EXPOSURE, OUTCOME, analytic_cols)]
# Missing data
replace_na_0 = list("pregnancies"=0, "alcoholhowmuch"=0)
df[names(replace_na_0)] = replace_na(df[names(replace_na_0)], replace_na_0)
return(df)
}
df = read_data(FILEPATH, ANALYTIC_VARS, FACTOR_COLS)
read_data = function(fp, analytic_cols, factor_cols){
df = read_excel(fp)
df[factor_cols] = apply(df[factor_cols], 2, factor)
df = rename(df, studyid = seqn)
df = df[c("studyid", EXPOSURE, OUTCOME, analytic_cols)]
# Missing data
replace_na_0 = list("pregnancies"=0, "alcoholhowmuch"=0)
df[names(replace_na_0)] = replace_na(df[names(replace_na_0)], replace_na_0)
return(df)
}
df = read_data(FILEPATH, ANALYTIC_VARS, FACTOR_COLS)
str(df)
m.out <- matchit(qsmk ~ . - subjectid - wt82_71,
data = dummy_cols(df[c("qsmk", "subjectid", "wt82_71", ANALYTIC_VARS)], select_columns = FACTOR_COLS, remove_selected_columns = TRUE),
method = "nearest", distance = "glm")
m.out <- matchit(qsmk ~ . - subjectid - wt82_71,
data = dummy_cols(df[c("qsmk", "studyid", "wt82_71", ANALYTIC_VARS)], select_columns = FACTOR_COLS, remove_selected_columns = TRUE),
method = "nearest", distance = "glm")
m.out <- matchit(qsmk ~ . - studyid - wt82_71,
data = dummy_cols(df[c("qsmk", "studyid", "wt82_71", ANALYTIC_VARS)], select_columns = FACTOR_COLS, remove_selected_columns = TRUE),
method = "nearest", distance = "glm")
df = read_data(FILEPATH, ANALYTIC_VARS, FACTOR_COLS)
str(df)
p_missing = df[c(ANALYTIC_VARS, "qsmk", "wtloss")] %>%
apply(2, function(x){mean(is.na(x))}) %>%
sort(decreasing=TRUE)
p_missing
df = df[which(apply(df[ANALYTIC_VARS], 1, function(x){max(is.na(x)) == FALSE})),]
m.out <- matchit(qsmk ~ . - studyid - wt82_71,
data = dummy_cols(df[c("qsmk", "studyid", "wt82_71", ANALYTIC_VARS)], select_columns = FACTOR_COLS, remove_selected_columns = TRUE),
method = "nearest", distance = "glm")
p_missing = df%>%
apply(2, function(x){mean(is.na(x))}) %>%
sort(decreasing=TRUE)
p_missing
df = df[which(apply(df[ANALYTIC_VARS], 1, function(x){max(is.na(x)) == FALSE})),]
m.out <- matchit(qsmk ~ . - studyid - wt82_71,
data = dummy_cols(df[c("qsmk", "studyid", "wt82_71", ANALYTIC_VARS)], select_columns = FACTOR_COLS, remove_selected_columns = TRUE),
method = "nearest", distance = "glm")
p_missing = df%>%
apply(2, function(x){mean(is.na(x))}) %>%
sort(decreasing=TRUE)
p_missing
df = df[which(apply(df, 1, function(x){max(is.na(x)) == FALSE})),]
m.out <- matchit(qsmk ~ . - studyid - wt82_71,
data = dummy_cols(df[c("qsmk", "studyid", "wt82_71", ANALYTIC_VARS)], select_columns = FACTOR_COLS, remove_selected_columns = TRUE),
method = "nearest", distance = "glm")
m.out <- matchit(qsmk ~ . - studyid - wt82_71,
data = dummy_cols(df[c("qsmk", "studyid", "wt82_71", ANALYTIC_VARS)], select_columns = FACTOR_COLS, remove_selected_columns = TRUE),
method = "nearest", distance = "glm")
m.out_summary = summary(m.out, un=FALSE)
m.out_summary
matched_data_greedy = match.data(m.out)
lm(wt82_71 ~ qsmk, data=matched_data_greedy)
summary(wt82_71 ~ qsmk, data=matched_data_greedy)
summary(lm(wt82_71 ~ qsmk, data=matched_data_greedy))
library(IrregLong)
library(MEMSS)
library(survival)
library(geepack)
library(data.table)
library(dplyr)
library(tidyr)
data(Phenobarb)
head(Phenobarb)
prepare_data_iiw = function(data, id_col="Subject"){
data_out = tibble(data)
data$event = 1
data$subject_id = as.integer(factor(data[,id_col]))
}
data_in = filter(Phenobarb, !is.na(conc))
data = prepare_data_iiw(data_in)
prepare_data_iiw = function(data, id_col="Subject"){
data = tibble(data)
data$event = 1
data$subject_id = as.integer(factor(data[,id_col]))
return(data)
}
data_in = filter(Phenobarb, !is.na(conc))
data = prepare_data_iiw(data_in)
data[,"Subject"]
data_in[,"Subject"]
prepare_data_iiw = function(data, id_col="Subject"){
data = tibble(data)
data$event = 1
print(data[,id_col])
data$subject_id = as.integer(factor(data[,id_col]))
return(data)
}
data = prepare_data_iiw(data_in)
data[,"Subject"]
data_in[,"Subject"]
factor(data_in[,"Subject"])
as.integer(factor(data_in[,"Subject"]))
prepare_data_iiw = function(data, id_col="Subject", time_col="time"){
data = tibble(data)
data$event = 1
print(data[,id_col])
print(as.integer(factor(data[,id_col])))
data$subject_id = as.integer(factor(data[,id_col]))
return(data)
}
data = prepare_data_iiw(data_in)
data = prepare_data_iiw(data_in)
prepare_data_iiw = function(data, id_col="Subject", time_col="time"){
data = tibble(data)
data$event = 1
print(data[,id_col])
print(as.integer(factor(data[,id_col])))
# data$subject_id = as.integer(factor(data[,id_col]))
return(data)
}
data = prepare_data_iiw(data_in)
1 + 1 + 3 + 4 + 2 + 3
1/6*(14) - 1/4*(12)
aids = data.frame(
c(1984, 1, 6, 16, 23)
,byrow=TRUE)
aids
aids = data.frame(matrix()
c(1984, 1, 6, 16, 23)
aids = data.frame(matrix(c(1984, 1, 6, 16, 23))
,byrow=TRUE))
aids = matrix(c(1984, 1, 6, 16, 23)
,byrow=TRUE)
aids
aids = matrix(c(1984, 1, 6, 16, 23)
,byrow=TRUE
,ncol=5)
aids
aids = c(1, 6, 16, 23, 27, 39, 39, 31, 30, 43, 51, 63, 70,
88, 97, 91, 104, 110, 113, 149, 159)
aids
aids = data.frame(
t=1:20,
y=c(1, 6, 16, 23, 27, 39, 39, 31, 30, 43, 51, 63, 70,
88, 97, 91, 104, 110, 113, 149, 159)
)
aids
length(aids)
aids = data.frame(
t=1:20,
y=c(1, 6, 16, 23, 27, 39, 31, 30, 43, 51, 63, 70,
88, 97, 91, 104, 110, 113, 149, 159)
)
aids
aids = data.frame(
time=1:20,
y=c(1, 6, 16, 23, 27, 39, 31, 30, 43, 51, 63, 70,
88, 97, 91, 104, 110, 113, 149, 159)
)
aids
library(dplyr)
library(ggplot2)
ggplot(aids, aes(x=time, y=y)) +
geom_point()
ggplot(aids, aes(x=log(time), y=log(y)))
ggplot(aids, aes(x=log(time), y=log(y))) +
geom_point()
head(aids)
glm(y ~ time, data=data, link="log")
aids
glm(y ~ time, data=aids, link="log")
glm(y ~ time, data=aids, family = familytype(link = "log"))
glm(y ~ time, data=aids, family = poisson(link = "log"))
dim(aids)
ggplot(aids, aes(x=time, y=log(y))) +
geom_point()
ggplot(aids, aes(x=log(time), y=log(y))) +
geom_point()
setwd("~/Code/DELPHI/2024-02-08-python")
setwd("~/Code/DELPHI/2024-03-08-nlp")
